name: Staging

on:
  pull_request_review:
    types: [submitted]
  pull_request_target:
    types: [labeled]

jobs:

  deploy-bq:
    if: |
      ( github.event_name == 'pull_request_review' && github.event.review.state == 'approved' ) ||
      ( github.event_name == 'pull_request_target' && github.event.label.name == 'deploy_st' )
    runs-on: ubuntu-20.04
    timeout-minutes: 15
    env:
      GCLOUD_VERSION: 290.0.1
      BQ_REGION: us
      BQ_PROJECT: bqcartost-core-${{ github.event.pull_request.number }}
      BQ_BUCKET: gs://carto-ext-ci-public-bqcartost-core-${{ github.event.pull_request.number }}/
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
      - name: Install gcloud
        uses: google-github-actions/setup-gcloud@master
        with:
            version: ${{ env.GCLOUD_VERSION }}
            project_id: ${{ env.BQ_PROJECT }}
            service_account_key: ${{ secrets.BQCARTOCUSTOMST_DEPLOY_CLOUD_EXTENSIONS_SA }}
            export_default_credentials: true
      - name: Create temporary staging environment
        shell: bash
        run: ./common/bigquery/create_staging_env.sh
      - name: Deploy to staging
        run: make deploy CLOUD=bigquery
      - name: Comment PR
        uses: actions/github-script@0.3.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { repo: { owner, repo }  } = context;
            const issue_number = ${{ github.event.pull_request.number }};
            github.issues.createComment({ issue_number, owner, repo, body: 'Deployed in project `${{ env.BQ_PROJECT }}`: https://console.cloud.google.com/bigquery?project=${{env.BQ_PROJECT}}' });

  deploy-sf:
    if: |
      ( github.event_name == 'pull_request_review' && github.event.review.state == 'approved' ) ||
      ( github.event_name == 'pull_request_target' && github.event.label.name == 'deploy_st' )
    runs-on: ubuntu-20.04
    timeout-minutes: 15
    env:
      SNOWSQL_VERSION: 1.2.13
      SNOWSQL: ~/snowflake/snowsql
      SNOWSQL_DEST: ~/snowflake
      SNOWSQL_ACCOUNT: ${{ secrets.SF_ACCOUNT }}
      SNOWSQL_USER: ${{ secrets.SF_USERNAME }}
      SNOWSQL_PWD: ${{ secrets.SF_PASSWORD }}
      SF_DATABASE: SFCARTOST
      SF_SHARE_ENABLED: 1
      SF_SHARE_PREFIX: SFCARTOST_
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
      - name: Install snowsql
        run: |
          curl -O https://sfc-repo.snowflakecomputing.com/snowsql/bootstrap/1.2/linux_x86_64/snowsql-${{env.SNOWSQL_VERSION}}-linux_x86_64.bash
          SNOWSQL_DEST=~/snowflake SNOWSQL_LOGIN_SHELL=~/.profile bash snowsql-${{env.SNOWSQL_VERSION}}-linux_x86_64.bash
      - name: Deploy to staging
        run: make deploy CLOUD=snowflake

  deploy-rs:
    if: |
      ( github.event_name == 'pull_request_review' && github.event.review.state == 'approved' ) ||
      ( github.event_name == 'pull_request_target' && github.event.label.name == 'deploy_st' )
    runs-on: ubuntu-20.04
    timeout-minutes: 15
    env:
      RS_REGION: us-east-2
      RS_HOST: redshift-cluster-1.c2gsqdockj5a.us-east-2.redshift.amazonaws.com
      RS_CLUSTER_ID: redshift-cluster-1
      RS_DATABASE: rscartost
      RS_USER: ${{ secrets.RS_USER }}
      RS_PASSWORD: ${{ secrets.RS_PASSWORD }}
      AWS_ACCESS_KEY_ID: ${{ secrets.RS_AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.RS_AWS_SECRET_ACCESS_KEY }}
      AWS_S3_BUCKET: s3://rscartost/
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.RS_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.RS_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2
      - name: Deploy to staging
        run: make deploy CLOUD=redshift