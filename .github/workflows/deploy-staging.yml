name: Deploy Staging

on:
  pull_request_review:
    types: [submitted]
  workflow_dispatch:
    inputs:
      cloud:
        description: 'Cloud warehouse (bigquery, snowflake, redshift, postgres, all)'
        required: true
        default: 'all'
      pr_number:
        description: PR number
        required: true

jobs:

  deploy-bq:
    runs-on: ubuntu-20.04
    timeout-minutes: 15
    if: |
      ( github.event_name == 'pull_request_review' && github.event.review.state == 'approved' ) ||
      ( github.event_name == 'workflow_dispatch' && contains(fromJson('["bigquery", "all"]'), github.event.inputs.cloud) )
    env:
      GCLOUD_VERSION: 290.0.1
      BQ_REGION: us
      BQ_PROJECT: bqcartost-core-${{ github.event.inputs.pr_number || github.event.pull_request.number }}
      BQ_BUCKET: gs://carto-ext-ci-public-bqcartost-core-${{ github.event.inputs.pr_number || github.event.pull_request.number }}/
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
      - uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.BQCARTOCUSTOMST_DEPLOY_CLOUD_EXTENSIONS_SA }}
          project_id: ${{ env.BQ_PROJECT }}
          create_credentials_file: true
      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v0
        with:
            version: ${{ env.GCLOUD_VERSION }}
            project_id: ${{ env.BQ_PROJECT }}
      - name: Create temporary staging environment
        shell: bash
        run: ./common/bigquery/create_staging_env.sh
      - name: Deploy to staging
        run: make deploy CLOUD=bigquery
      - name: Comment PR
        uses: actions/github-script@0.3.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { repo: { owner, repo }  } = context;
            const issue_number = ${{ github.event.inputs.pr_number || github.event.pull_request.number }};
            github.issues.createComment({ issue_number, owner, repo, body: 'Deployed in project `${{ env.BQ_PROJECT }}`: https://console.cloud.google.com/bigquery?project=${{env.BQ_PROJECT}}' });

  deploy-sf:
    runs-on: ubuntu-20.04
    timeout-minutes: 15
    if: false
    env:
      SNOWSQL_VERSION: 1.2.13
      SNOWSQL_BIN: ~/snowflake/snowsql
      SNOWSQL_DEST: ~/snowflake
      SF_ACCOUNT: ${{ secrets.SF_ACCOUNT }}
      SF_USER: ${{ secrets.SF_USERNAME }}
      SF_PASSWORD: ${{ secrets.SF_PASSWORD }}
      SF_DATABASE: SFCARTOST
      SF_SCHEMA_PREFIX: core_${{ github.event.inputs.pr_number || github.event.pull_request.number }}_
      SF_SHARE_ENABLED: 0
      SF_SHARE_PREFIX: SFCARTOST_
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
      - name: Setup snowsql
        run: |
          curl -O https://sfc-repo.snowflakecomputing.com/snowsql/bootstrap/1.2/linux_x86_64/snowsql-${{env.SNOWSQL_VERSION}}-linux_x86_64.bash
          SNOWSQL_DEST=~/snowflake SNOWSQL_LOGIN_SHELL=~/.profile bash snowsql-${{env.SNOWSQL_VERSION}}-linux_x86_64.bash
      - name: Deploy to staging
        run: make deploy CLOUD=snowflake
      - name: Comment PR
        uses: actions/github-script@0.3.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { repo: { owner, repo }  } = context;
            const issue_number = ${{ github.event.inputs.pr_number || github.event.pull_request.number }};
            github.issues.createComment({ issue_number, owner, repo, body: 'Deployed in schema `${{ env.SF_DATABASE }}.${{ env.SF_SCHEMA_PREFIX }}carto`' });

  deploy-pg:
    runs-on: ubuntu-20.04
    timeout-minutes: 15
    if: false
    env:
      PG_HOST: aurora-cluster-instance-1.ct98rsozsg3g.us-east-2.rds.amazonaws.com
      PG_DATABASE: pgcartost
      PG_SCHEMA_PREFIX: core_${{ github.event.inputs.pr_number || github.event.pull_request.number }}_
      PG_USER: ${{ secrets.PG_USER }}
      PG_PASSWORD: ${{ secrets.PG_PASSWORD }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
      - name: Deploy to staging
        run: make deploy CLOUD=postgres
      - name: Comment PR
        uses: actions/github-script@0.3.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { repo: { owner, repo }  } = context;
            const issue_number = ${{ github.event.inputs.pr_number || github.event.pull_request.number }};
            github.issues.createComment({ issue_number, owner, repo, body: 'Deployed in schema `${{ env.PG_DATABASE }}.${{ env.PG_SCHEMA_PREFIX }}carto`' });