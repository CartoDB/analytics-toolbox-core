name: Carto Spatial Extension

#################################################################################
# IMPORTANT: READ BEFORE EDITIING THIS FILE                                     #
#                                                                               #
# - `pull_request` event is **intentionally** excluded because we need to check #
#   the code from external contributors before running it. Once verified        #
#   carto member should label the pull request with `run_ci` label              #
#   this will trigger one execution of ci using the external code.              #
#   to run it again we need to remove then add the `run_ci` label               #
# - for internal contributors we use `push` event and CI runs automatically     #
#                                                                               #
# If you edit this file, please ask for code review from infrastructure team    #
#################################################################################
on:
  push:
    branches:
      - '*'
  pull_request_target:
    types: [labeled]


env:
  GCLOUD_VERSION: 'latest'
  NODE_VERSION: '15'
  MAKEFLAGS: '-j2'

  BQ_PROJECTID: bqcartoci
  BQ_BUCKET_PUBLIC: gs://bqcartoci/
  BQ_DATASET_PREFIX: ${{ github.sha }}
  POST_INTEGRATION_CLEANUP: 1

jobs:
  test-extension:
    timeout-minutes: 15
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash
    steps:

      - name: Check if fork pull request can run CI
        run: |
           if [[ "${{ github.event.action == 'labeled' && github.event.label.name == 'run_ci' }}" == "true" ]]; then
             echo "Fork pull request was labeled: ${{github.event.label.name}} by ${{ github.event.sender.login }}"
           else
             echo "Fork pull request need to be verified by carto member then labeled with run_ci"
             exit 1
           fi
        if: github.event_name == 'pull_request_target'

      - name: Checkout repo
        uses: actions/checkout@v2
        if: github.event_name != 'pull_request_target'

      - name: Checkout forked repo
        uses: actions/checkout@v2
        with:
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ github.event.pull_request.head.ref }}
        if: github.event_name == 'pull_request_target'

      - name: Install node
        uses: actions/setup-node@v1
        with:
          node-version: ${{env.NODE_VERSION}}

      - name: Get environment
        run: |
          source tools/dev_environment.sh.sample
          env >> $GITHUB_ENV
      - name: Build
        run: make

      - name: Run unit tests
        run: make check

      - name: Install gcloud
        uses: google-github-actions/setup-gcloud@master
        with:
            version: ${{env.GCLOUD_VERSION}}
            project_id: ${{env.BQ_PROJECTID}}
            service_account_key: ${{ secrets.BQCARTOCI_DEPLOY_CLOUD_EXTENSIONS_SA_BASE64 }}
            export_default_credentials: true

      - name: Run integration tests
        run: make check-integration

  linter:
    timeout-minutes: 15
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: bash
    steps:

      - name: Check if fork pull request can run CI
        run: |
           if [[ "${{ github.event.action == 'labeled' && github.event.label.name == 'run_ci' }}" == "true" ]]; then
             echo "Fork pull request was labeled: ${{github.event.label.name}} by ${{ github.event.sender.login }}"
           else
             echo "Fork pull request need to be verified by carto member then labeled with run_ci"
             exit 1
           fi
        if: github.event_name == 'pull_request_target'

      - name: Checkout repo
        uses: actions/checkout@v2
        if: github.event_name != 'pull_request_target'

      - name: Checkout forked repo
        uses: actions/checkout@v2
        with:
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ github.event.pull_request.head.ref }}
        if: github.event_name == 'pull_request_target'

      - name: Check linter
        run: make check-linter
