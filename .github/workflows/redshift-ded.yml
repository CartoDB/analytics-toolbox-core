name: Redshift dedicated env
on:
  pull_request:
    types: [closed, unlabeled, labeled]
  push:
    paths:
      - "clouds/redshift/**"
      - ".github/workflows/redshift.yml"

env:
  NODE_VERSION: 14
  PYTHON2_VERSION: 2.7.18
  PYTHON3_VERSION: 3.8.10

jobs:
  dedicated-rs:
    if: github.event.label.name == 'dedicated_redshift'
    runs-on: ubuntu-20.04
    timeout-minutes: 20
    env:
      RS_PREFIX: dedicated_${{ github.event.pull_request.number }}_
      RS_HOST: ${{ secrets.RS_HOST_DEDICATED }}
      RS_DATABASE: ${{ secrets.RS_DATABASE_DEDICATED }}
      RS_USER: ${{ secrets.RS_USER_DEDICATED }}
      RS_PASSWORD: ${{ secrets.RS_PASSWORD_DEDICATED }}
      RS_BUCKET: ${{ secrets.RS_BUCKET_DEDICATED }}
      AWS_ACCESS_KEY_ID: ${{ secrets.RS_AWS_ACCESS_KEY_ID_DEDICATED }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.RS_AWS_SECRET_ACCESS_KEY_DEDICATED }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Setup python 2
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON2_VERSION }}
      - name: Setup python 3
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON3_VERSION }}
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.RS_AWS_ACCESS_KEY_ID_DEDICATED }}
          aws-secret-access-key: ${{ secrets.RS_AWS_SECRET_ACCESS_KEY_DEDICATED }}
          aws-region: ${{ secrets.RS_REGION_DEDICATED }}
      - name: Setup virtualenv
        run: pip install virtualenv
      - name: Run deploy
        id: deploy
        if: |
          github.event.action == 'labeled' ||
          github.event_name == 'push'
        run: |
          cd clouds/redshift
          make deploy
      - name: Run release
        id: release
        if: github.event.action != 'labeled'
        run: |
          cd clouds/redshift
          make remove
      - name: Comment deploy PR
        if: steps.deploy.outcome == 'success'
        uses: thollander/actions-comment-pull-request@v1
        with:
          message: |
            Dedicated ${{ env.RS_PREFIX }}_carto environment deployed in Redshift host ${{ env.RS_HOST }} and ${{ env.RS_DATABASE }} database
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Comment release PR
        if: steps.release.outcome == 'success'
        uses: thollander/actions-comment-pull-request@v1
        with:
          message: |
            Dedicated environment released
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
