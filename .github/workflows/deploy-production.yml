name: Deploy Production

on:
  push:
    branches:
      - master
  workflow_dispatch:
    inputs:
      cloud:
        description: 'Cloud warehouse (bigquery, snowflake, redshift, all)'
        required: true
        default: 'all'
      force_deploy:
        description: 'Force deployment of all modules'
        required: true
        default: 'false'

env:
  INPUT_FORCE_DEPLOY: ${{ github.event.inputs.force_deploy }}

jobs:

  obtain-ci-credentials:
    runs-on: ubuntu-20.04
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    outputs:
      # TODO: Add BigQuery
      sf_user: ${{ steps.gcp-secrets.outputs.SF_USER }}
      sf_password: ${{ steps.gcp-secrets.outputs.SF_PASSWORD }}
      rs_user: ${{ steps.gcp-secrets.outputs.RS_USER }}
      rs_password: ${{ steps.gcp-secrets.outputs.RS_PASSWORD }}
    env:
      GOOGLE_SECRETS_PROJECT_ID: 'carto-terraform-ci-cd'
    steps:
      - name: Google Cloud Auth
        uses: google-github-actions/auth@v0
        with:
          # FIXME: We need to add this SA to both repositories
          credentials_json: ${{ secrets.CARTO_MONITORING_SERVICE_ACCOUNT }}
          project_id: ${{ env.GOOGLE_SECRETS_PROJECT_ID }}

      - name: Retrieve secrets
        id: gcp-secrets
        uses: google-github-actions/get-secretmanager-secrets@v0
        with:
          secrets: |-
            SF_USER:projects/${{ env.GOOGLE_SECRETS_PROJECT_ID }}/secrets/terraform-carto3-snowflake-ci-user
            SF_PASSWORD:projects/${{ env.GOOGLE_SECRETS_PROJECT_ID }}/secrets/terraform-carto3-snowflake-ci-password
            RS_USER:projects/${{ env.GOOGLE_SECRETS_PROJECT_ID }}/secrets/terraform-carto3-redshift-ci-user
            RS_PASSWORD:projects/${{ env.GOOGLE_SECRETS_PROJECT_ID }}/secrets/terraform-carto3-redshift-ci-password

  deploy-bq:
    runs-on: ubuntu-20.04
    timeout-minutes: 15
    if: |
      ( github.event_name == 'push' ) ||
      ( github.event_name == 'workflow_dispatch' && contains(fromJson('["bigquery", "all"]'), github.event.inputs.cloud) )
    strategy:
      matrix:
        include:
          - region: us
            project: carto-os
            bucket: gs://spatialextension_os/
            permissions: '[{"specialGroup":"allAuthenticatedUsers","role":"READER"}]'
          - region: us
            project: carto-st
            bucket: gs://spatialextension_st/
            group: spatialextension_users_st@cartodb.com
          - region: us
            project: carto-sm
            bucket: gs://spatialextension_sm/
            group: spatialextension_users_sm@cartodb.com
          - region: us
            project: carto-me
            bucket: gs://spatialextension_me/
            group: spatialextension_users_me@cartodb.com
          - region: us
            project: carto-la
            bucket: gs://spatialextension_la/
            group: spatialextension_users_la@cartodb.com
          - region: us
            project: carto-un
            bucket: gs://spatialextension_un/
            group: spatialextension_users_un@cartodb.com
          - region: eu
            project: carto-os-eu
            bucket: gs://spatialextension_os/
            permissions: '[{"specialGroup":"allAuthenticatedUsers","role":"READER"}]'
          - region: eu
            project: carto-st-eu
            bucket: gs://spatialextension_st/
            group: spatialextension_users_st@cartodb.com
          - region: eu
            project: carto-sm-eu
            bucket: gs://spatialextension_sm/
            group: spatialextension_users_sm@cartodb.com
          - region: eu
            project: carto-me-eu
            bucket: gs://spatialextension_me/
            group: spatialextension_users_me@cartodb.com
          - region: eu
            project: carto-la-eu
            bucket: gs://spatialextension_la/
            group: spatialextension_users_la@cartodb.com
          - region: eu
            project: carto-un-eu
            bucket: gs://spatialextension_un/
            group: spatialextension_users_un@cartodb.com
          - region: asia-northeast1
            project: carto-un-as-ne1
            bucket: gs://spatialextension_un/
            group: spatialextension_users_un@cartodb.com
          - region: australia-southeast1
            project: carto-un-au-se1
            bucket: gs://spatialextension_un/
            group: spatialextension_users_un@cartodb.com
          - region: northamerica-northeast1
            project: carto-un-na-ne1
            bucket: gs://spatialextension_un/
            group: spatialextension_users_un@cartodb.com
    env:
      GCLOUD_VERSION: 290.0.1
      BQ_REGION: ${{ matrix.region }}
      BQ_PROJECT: ${{ matrix.project }}
      BQ_BUCKET: ${{ matrix.bucket }}
      BQ_PERMISSIONS: ${{ matrix.permissions }}
      BQ_PERMISSIONS_GROUP: ${{ matrix.group }}
      BQ_PERMISSIONS_ROLE_NAME: spatialextensionUser
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
      - name: Check diff
        uses: technote-space/get-diff-action@v4
        with:
          PATTERNS: '**/*.+(js|sql)'
          FILES: 'Makefile'
      - uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.BQCARTO_DEPLOY_CLOUD_EXTENSIONS_SA_BASE64 }}
          project_id: ${{ env.BQ_PROJECT }}
          create_credentials_file: true
      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@master
        with:
            version: ${{ env.GCLOUD_VERSION }}
            project_id: ${{ env.BQ_PROJECT }}
      - name: Deploy to production
        run: make deploy CLOUD=bigquery

  deploy-sf:
    runs-on: ubuntu-20.04
    timeout-minutes: 15
    needs: [obtain-ci-credentials]
    if: |
      ( github.event_name == 'push' ) ||
      ( github.event_name == 'workflow_dispatch' && contains(fromJson('["snowflake", "all"]'), github.event.inputs.cloud) )
    strategy:
      matrix:
        include:
          - sf_account: ${{ secrets.SF_ACCOUNT }}
            sf_user: ${{ secrets.SF_USERNAME }}
            sf_password: ${{ secrets.SF_PASSWORD }}
            sf_database: CARTO_OS
          - sf_account: sxa81489
            sf_user: ${{ needs.obtain-ci-credentials.outputs.sf_user }}
            sf_password: ${{ needs.obtain-ci-credentials.outputs.sf_password }}
            sf_database: CI
    env:
      # FIXME: Add which Role to use?
      SNOWSQL_VERSION: 1.2.13
      SNOWSQL_BIN: ~/snowflake/snowsql
      SNOWSQL_DEST: ~/snowflake
      SF_ACCOUNT: ${{ matrix.sf_account }}
      SF_USER: ${{ matrix.sf_user }}
      SF_PASSWORD: ${{ matrix.sf_password }}
      SF_DATABASE: ${{ matrix.sf_database }}
      SF_SHARE_ENABLED: 1
      SF_SHARES: carto_os_temp
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
      - name: Check diff
        uses: technote-space/get-diff-action@v4
        with:
          PATTERNS: '**/*.+(js|sql)'
          FILES: 'Makefile'
      - name: Setup snowsql
        run: |
          curl -O https://sfc-repo.snowflakecomputing.com/snowsql/bootstrap/1.2/linux_x86_64/snowsql-${{env.SNOWSQL_VERSION}}-linux_x86_64.bash
          SNOWSQL_DEST=~/snowflake SNOWSQL_LOGIN_SHELL=~/.profile bash snowsql-${{env.SNOWSQL_VERSION}}-linux_x86_64.bash
      - name: Deploy to production
        run: make deploy CLOUD=snowflake

  deploy-rs:
    runs-on: ubuntu-20.04
    timeout-minutes: 15
    needs: [obtain-ci-credentials]
    if: |
      ( github.event_name == 'push' ) ||
      ( github.event_name == 'workflow_dispatch' && contains(fromJson('["redshift", "all"]'), github.event.inputs.cloud) )
    strategy:
      matrix:
        include:
          - rs_region: us-east-2
            rs_host: redshift-cluster-1.c2gsqdockj5a.us-east-2.redshift.amazonaws.com
            rs_cluster_id: redshift-cluster-1
            rs_database: rscarto
            rs_user: ${{ secrets.RS_USER }}
            rs_password: ${{ secrets.RS_PASSWORD }}
            aws_access_key_id: ${{ secrets.RS_AWS_ACCESS_KEY_ID }}
            aws_secret_access_key: ${{ secrets.RS_AWS_SECRET_ACCESS_KEY }}
            rs_bucket: s3://rscarto/
          - rs_region: us-east-1
            rs_host: carto-redshift-ci-9597.cot5dbai0lq0.us-east-1.redshift.amazonaws.com
            rs_cluster_id: carto-redshift-ci-9597
            rs_database: ci
            rs_user: ${{ needs.obtain-ci-credentials.outputs.rs_user }}
            rs_password: ${{ needs.obtain-ci-credentials.outputs.rs_password }}
            # FIXME: Create programatic user for this
            aws_access_key_id: ${{ needs.obtain-ci-credentials.outputs.rs_user }}
            aws_secret_access_key: ${{ needs.obtain-ci-credentials.outputs.rs_user }}
            # FIXME: Create real bucket
            rs_bucket: ${{ needs.obtain-ci-credentials.outputs.rs_user }}
    env:
      RS_REGION: ${{ matrix.rs_region }}
      RS_HOST: ${{ matrix.rs_host }}
      RS_CLUSTER_ID: ${{ matrix.rs_cluster_id }}
      RS_DATABASE: ${{ matrix.rs_database }}
      RS_USER: ${{ matrix.rs_user }}
      RS_PASSWORD: ${{ matrix.rs_password }}
      AWS_ACCESS_KEY_ID: ${{ matrix.aws_access_key_id }}
      AWS_SECRET_ACCESS_KEY: ${{ matrix.aws_secret_access_key }}
      RS_BUCKET: ${{ matrix.rs_bucket }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.RS_REGION }}
      - name: Setup virtualenv
        run: pip install virtualenv
      - name: Deploy to production
        run: make deploy CLOUD=redshift
