name: Delete Staging

on:
  pull_request:
    types: [closed]
  workflow_dispatch:
    inputs:
      cloud:
        description: 'Cloud warehouse (bigquery, snowflake, redshift, all)'
        required: true
        default: 'all'
      pr_number:
        description: PR number
        required: true

jobs:

  delete-bq:
    runs-on: ubuntu-20.04
    timeout-minutes: 15
    if: |
      ( github.event_name == 'pull_request' ) ||
      ( github.event_name == 'workflow_dispatch' && contains(fromJson('["bigquery", "all"]'), github.event.inputs.cloud) )
    env:
      GCLOUD_VERSION: 290.0.1
      BQ_PROJECT: bqcartost-core-${{ github.event.inputs.pr_number || github.event.pull_request.number }}
    steps:
      - uses: google-github-actions/auth@v0
        with:
          credentials_json: ${{ secrets.BQCARTOCUSTOMST_DEPLOY_CLOUD_EXTENSIONS_SA }}
          project_id: ${{ env.BQ_PROJECT }}
      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v0
        with:
            version: ${{ env.GCLOUD_VERSION }}
            project_id: ${{ env.BQ_PROJECT }}
      - name: Delete project
        shell: bash
        run: gcloud projects delete ${{ env.BQ_PROJECT }} --quiet
      - name: Comment PR
        uses: actions/github-script@0.3.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { repo: { owner, repo }  } = context;
            const issue_number = ${{ github.event.inputs.pr_number || github.event.pull_request.number }};
            github.issues.createComment({ issue_number, owner, repo, body: 'Project `${{ env.BQ_PROJECT }}` deleted! ðŸ”¥' });

  delete-sf:
    runs-on: ubuntu-20.04
    timeout-minutes: 15
    if: |
      ( github.event_name == 'pull_request' ) ||
      ( github.event_name == 'workflow_dispatch' && contains(fromJson('["snowflake", "all"]'), github.event.inputs.cloud) )
    env:
      SNOWSQL_VERSION: 1.2.13
      SNOWSQL_BIN: ~/snowflake/snowsql
      SNOWSQL_DEST: ~/snowflake
      SF_ACCOUNT: ${{ secrets.SF_ACCOUNT }}
      SF_USER: ${{ secrets.SF_USERNAME }}
      SF_PASSWORD: ${{ secrets.SF_PASSWORD }}
      SF_DATABASE: SFCARTOST
      SF_SCHEMA_PREFIX: core_${{ github.event.inputs.pr_number || github.event.pull_request.number }}_
      SF_SHARE_ENABLED: 0
      SF_SHARE_PREFIX: SFCARTOST_
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
      - name: Setup snowsql
        run: |
          curl -O https://sfc-repo.snowflakecomputing.com/snowsql/bootstrap/1.2/linux_x86_64/snowsql-${{env.SNOWSQL_VERSION}}-linux_x86_64.bash
          SNOWSQL_DEST=~/snowflake SNOWSQL_LOGIN_SHELL=~/.profile bash snowsql-${{env.SNOWSQL_VERSION}}-linux_x86_64.bash
      - name: Delete schema and share
        run: make clean-deploy CLOUD=snowflake
      - name: Comment PR
        uses: actions/github-script@0.3.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { repo: { owner, repo }  } = context;
            const issue_number = ${{ github.event.inputs.pr_number || github.event.pull_request.number }};
            github.issues.createComment({ issue_number, owner, repo, body: 'Schema `${{ env.SF_DATABASE }}.${{ env.SF_SCHEMA_PREFIX }}carto` deleted! ðŸ”¥' });

  delete-rs:
    runs-on: ubuntu-20.04
    timeout-minutes: 15
    if: false
    env:
      RS_REGION: us-east-2
      RS_HOST: redshift-cluster-1.c2gsqdockj5a.us-east-2.redshift.amazonaws.com
      RS_CLUSTER_ID: redshift-cluster-1
      RS_DATABASE: rscartost
      RS_SCHEMA_PREFIX: core_${{ github.event.inputs.pr_number || github.event.pull_request.number }}_
      RS_USER: ${{ secrets.RS_USER }}
      RS_PASSWORD: ${{ secrets.RS_PASSWORD }}
      AWS_ACCESS_KEY_ID: ${{ secrets.RS_AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.RS_AWS_SECRET_ACCESS_KEY }}
      RS_BUCKET: s3://rscartost/
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.RS_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.RS_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2
      - name: Setup virtualenv
        run: pip install virtualenv
      - name: Delete schema
        run: make clean-deploy CLOUD=redshift
      - name: Comment PR
        uses: actions/github-script@0.3.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { repo: { owner, repo }  } = context;
            const issue_number = ${{ github.event.inputs.pr_number || github.event.pull_request.number }};
            github.issues.createComment({ issue_number, owner, repo, body: 'Schema `${{ env.RS_DATABASE }}.${{ env.RS_SCHEMA_PREFIX }}carto` deleted! ðŸ”¥' });
