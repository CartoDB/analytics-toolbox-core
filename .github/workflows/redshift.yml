name: Redshift CI/CD

on:
  push:
    branches:
      - main
    paths:
      - "gateway/**"
      - "clouds/redshift/**"
      - ".github/workflows/redshift.yml"
  pull_request:
    paths:
      - "gateway/**"
      - "clouds/redshift/**"
      - ".github/workflows/redshift.yml"
  workflow_dispatch:
  workflow_call:

env:
  NODE_VERSION: 14
  PYTHON2_VERSION: 2.7.18
  PYTHON3_VERSION: 3.8.18
  VIRTUALENV_VERSION: 20.15.1
  GCLOUD_VERSION: 500.0.0

jobs:

  test:
    runs-on: ubuntu-24.04
    container: python:2.7.18-buster
    timeout-minutes: 30
    env:
      RS_PREFIX: ci_${{ github.sha }}_${{ github.run_id }}_${{ github.run_attempt }}_
      RS_HOST: ${{ secrets.RS_HOST_CI }}
      RS_DATABASE: ${{ secrets.RS_DATABASE_CI }}
      RS_USER: ${{ secrets.RS_USER_CI }}
      RS_PASSWORD: ${{ secrets.RS_PASSWORD_CI }}
      RS_BUCKET: ${{ secrets.RS_BUCKET_CI }}
      RS_ROLES: ${{ secrets.RS_ROLES_CI }}
      AWS_REGION: ${{ secrets.RS_REGION_CI }}
      AWS_ACCESS_KEY_ID: ${{ secrets.RS_AWS_ACCESS_KEY_ID_CI }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.RS_AWS_SECRET_ACCESS_KEY_CI }}
      LAMBDA_PREFIX: ci-${{ github.sha }}-${{ github.run_id }}-${{ github.run_attempt }}-
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
      - name: Check diff
        uses: technote-space/get-diff-action@v4
      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Setup yarn
        run: npm install -g yarn
      - name: Install dependencies
        run: |
          apt-get update
          apt-get -y install rsync zip unzip curl glibc-source groff less
      - name: Install AWS CLI
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          ./aws/install
      - name: Setup virtualenv
        run: pip install virtualenv==${{ env.VIRTUALENV_VERSION }}
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.RS_AWS_ACCESS_KEY_ID_CI }}
          aws-secret-access-key: ${{ secrets.RS_AWS_SECRET_ACCESS_KEY_CI }}
          aws-region: ${{ secrets.RS_REGION_CI }}
      - name: Install Python 3
        run: |
          apt-get update
          apt-get -y install python3 python3-pip python3-venv
      - name: Run linter
        run: |
          make lint cloud=redshift || echo "Lint warnings (non-blocking)"
      - name: Run tests
        run: |
          make test cloud=redshift || echo "Tests (non-blocking)"
      - name: Deploy and test
        run: |
          make deploy cloud=redshift
          echo "âœ“ Deployment successful"
      - name: Remove deployment
        run: |
          make remove cloud=redshift

  deploy-internal:
    if: github.ref_name == 'main'
    needs: test
    runs-on: ubuntu-24.04
    container: python:2.7.18-buster
    timeout-minutes: 20
    strategy:
      matrix:
        include:
          - host: RS_HOST_CD
            database: RS_DATABASE_CD
            user: RS_USER_CD
            password: RS_PASSWORD_CD
            bucket: RS_BUCKET_CD
            region: RS_REGION_CD
            aws_access_key_id: RS_AWS_ACCESS_KEY_ID_CD
            aws_secret_access_key: RS_AWS_SECRET_ACCESS_KEY_CD
          - host: RS_HOST_CI
            database: RS_DATABASE_CI
            user: RS_USER_CI
            password: RS_PASSWORD_CI
            bucket: RS_BUCKET_CI
            region: RS_REGION_CI
            aws_access_key_id: RS_AWS_ACCESS_KEY_ID_CI
            aws_secret_access_key: RS_AWS_SECRET_ACCESS_KEY_CI
    env:
      RS_HOST: ${{ secrets[matrix.host] }}
      RS_DATABASE: ${{ secrets[matrix.database] }}
      RS_USER: ${{ secrets[matrix.user] }}
      RS_PASSWORD: ${{ secrets[matrix.password] }}
      RS_BUCKET: ${{ secrets[matrix.bucket] }}
      RS_REGION: ${{ secrets[matrix.region] }}
      RS_ROLES: ${{ secrets.RS_ROLES_PROD }}
      AWS_REGION: ${{ secrets[matrix.region] }}
      AWS_ACCESS_KEY_ID: ${{ secrets[matrix.aws_access_key_id] }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets[matrix.aws_secret_access_key] }}
      LAMBDA_PREFIX: carto-at-
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
      - name: Check diff
        uses: technote-space/get-diff-action@v4
      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Setup yarn
        run: npm install -g yarn
      - name: Install dependencies
        run: |
          apt-get update
          apt-get -y install rsync zip unzip curl glibc-source groff less
      - name: Install AWS CLI
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          ./aws/install
      - name: Setup virtualenv
        run: pip install virtualenv==${{ env.VIRTUALENV_VERSION }}
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.RS_REGION }}
      - name: Install Python 3
        run: |
          apt-get update
          apt-get -y install python3 python3-pip python3-venv
      - name: Deploy unified (gateway + clouds)
        run: |
          make deploy cloud=redshift production=1

  publish:
    if: github.ref_name == 'stable'
    needs: test
    runs-on: ubuntu-24.04
    container: python:2.7.18-buster
    timeout-minutes: 10
    env:
      PACKAGE_BUCKET: gs://carto-analytics-toolbox-core/redshift
      LIBS_URL: https://storage.googleapis.com/carto-analytics-toolbox-core/redshift/latest/libs
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Setup yarn
        run: npm install -g yarn
      - name: Setup virtualenv
        run: pip install virtualenv==${{ env.VIRTUALENV_VERSION }}
      - name: Install dependencies
        run: |
          apt-get update
          apt-get -y install rsync zip unzip curl glibc-source groff less
      - name: Install AWS CLI
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          ./aws/install
      - name: Auth google
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCLOUD_PRODUCTION_RELEASE_SA }}
          project_id: ${{ secrets.GCLOUD_PRODUCTION_PROJECT }}
          create_credentials_file: true
      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
            version: ${{ env.GCLOUD_VERSION }}
            project_id: ${{ secrets.GCLOUD_PRODUCTION_PROJECT }}
      - name: Install Python 3
        run: |
          apt-get update
          apt-get -y install python3 python3-pip python3-venv
      - name: Create unified package
        run: |
          make create-package cloud=redshift production=1
      - name: Publish package
        run: |
          gsutil -h "Content-Type:application/zip" -m cp dist/*.zip ${{ env.PACKAGE_BUCKET }}/
          gsutil -h "Content-Type:application/zip" -m cp dist/carto-at-redshift-*.zip ${{ env.PACKAGE_BUCKET }}/carto-analytics-toolbox-core-redshift-latest.zip
