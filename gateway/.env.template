# This is a sample .env file for use in local development.
#
# The .env file can be placed in one of two locations:
# 1. Core root directory (../): Shared with clouds (Redshift, BigQuery, etc.)
# 2. Gateway directory (.): Gateway-specific overrides
#
# The gateway will load from core first, then apply gateway overrides if present.
# This allows sharing common AWS credentials across clouds and gateway.
#
# Duplicate this file as .env and update the environment variables
# to match your desired config. Replace each <template> with your values.
#
# Note: duplicate dollar sign to make it visible: $$.

# AWS Configuration (shared with Redshift cloud)
# Supports multiple authentication methods - choose ONE:

# METHOD 1: AWS Profile (Recommended - most secure)
# Uses credentials from ~/.aws/credentials
# AWS_PROFILE=default
AWS_REGION=us-east-1

# METHOD 2: Explicit Credentials (for CI/CD or when profiles not available)
# AWS_ACCESS_KEY_ID=<access-key-id>
# AWS_SECRET_ACCESS_KEY=<secret-access-key>
# AWS_SESSION_TOKEN=<session-token>  # Optional, for temporary credentials

# METHOD 3: Assume Role (for cross-account deployment)
# Requires AWS_PROFILE or AWS_ACCESS_KEY_ID to be set first
# AWS_ASSUME_ROLE_ARN=arn:aws:iam::<account-id>:role/<role-name>

# METHOD 4: IAM Role (automatic if running on EC2/ECS/Lambda)
# No configuration needed - AWS SDK automatically discovers IAM role

# METHOD 5: AWS SSO (recommended for enterprise)
# First run: aws sso login --profile <profile-name>
# Then set: AWS_PROFILE=<profile-name>

# Gateway-specific Lambda Configuration
# Lambda function names will be: {LAMBDA_PREFIX}{function_name}
# Include separator in prefix if desired (e.g., "myname-" or "myname_")
LAMBDA_PREFIX=carto-at-dev-

# Lambda Execution Role (optional)
# If not specified, the system will try to create "carto-at-lambda-execution-role"
# To avoid needing IAM permissions, pre-create this role with:
#   - Trust policy allowing lambda.amazonaws.com to assume it
#   - Attached policy: AWSLambdaBasicExecutionRole
# LAMBDA_EXECUTION_ROLE_ARN=arn:aws:iam::<account-id>:role/<role-name>

# Redshift Configuration (uses RS_ prefix to match clouds)
# RS_PREFIX: Prefix for development schemas/libraries
#   - production=0 (dev): schema = "{RS_PREFIX}carto" (e.g., "myname_carto")
#   - production=1 (prod): schema = "carto" (no prefix)
RS_PREFIX=
RS_DATABASE=<database>

# Redshift Connection Method (choose ONE of two options):
#
# OPTION 1: Direct Connection (like clouds - recommended for consistency)
# Requires: pip install redshift_connector
RS_HOST=<cluster>.<account>.<region>.redshift.amazonaws.com
RS_USER=<user>
RS_PASSWORD=<password>
#
# OPTION 2: Data API (alternative - no extra dependencies)
# RS_CLUSTER_IDENTIFIER=<cluster-id>
# RS_USER=<iam-user>  # For IAM auth
# # OR
# # RS_SECRET_ARN=arn:aws:secretsmanager:<region>:<account>:secret:<secret-name>

# IAM Role(s) for Redshift to invoke Lambda functions
# This role must be attached to your Redshift cluster
# For gateway, typically just one role. For clouds with CARTO services, comma-separated list.
RS_ROLES=arn:aws:iam::<redshift-account-id>:role/<role-name>
#
# Cross-Account Setup (if Lambda and Redshift are in different AWS accounts):
# 1. Lambda deployed in Account A with AWS_ACCESS_KEY_ID/AWS_SECRET_ACCESS_KEY above
# 2. RS_ROLES points to a role in Account B (Redshift's account)
# 3. Lambda must have a resource policy allowing Account B's role to invoke it:
#    aws lambda add-permission \
#      --function-name carto-at-dev-quadbin_polyfill \
#      --statement-id redshift-cross-account \
#      --action lambda:InvokeFunction \
#      --principal arn:aws:iam::<redshift-account-id>:role/<role-name>
# 4. The role in RS_ROLES must have trust relationship to assume from Redshift

# Note: RS_BUCKET is NOT needed for gateway (only for clouds native UDFs)
