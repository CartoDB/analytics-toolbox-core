# This is a sample .env file for use in local development.
#
# The .env file can be placed in one of two locations:
# 1. Core root directory (../): Shared with clouds (Redshift, BigQuery, etc.)
# 2. Gateway directory (.): Gateway-specific overrides
#
# The gateway will load from core first, then apply gateway overrides if present.
# This allows sharing common AWS credentials across clouds and gateway.
#
# Duplicate this file as .env and update the environment variables
# to match your desired config. Replace each <template> with your values.
#
# Note: duplicate dollar sign to make it visible: $$.

# ==============================================================================
# 1. AWS Authentication (shared with Redshift cloud)
# ==============================================================================
# Supports multiple authentication methods - choose ONE:

# METHOD 1: AWS Profile (Recommended - most secure)
# Uses credentials from ~/.aws/credentials
# AWS_PROFILE=default
AWS_REGION=us-east-1

# METHOD 2: Explicit Credentials (for CI/CD or when profiles not available)
# AWS_ACCESS_KEY_ID=<access-key-id>
# AWS_SECRET_ACCESS_KEY=<secret-access-key>
# AWS_SESSION_TOKEN=<session-token>  # Optional, for temporary credentials

# METHOD 3: IAM Role (automatic if running on EC2/ECS/Lambda)
# No configuration needed - AWS SDK automatically discovers IAM role

# METHOD 4: AWS SSO (recommended for enterprise)
# First run: aws sso login --profile <profile-name>
# Then set: AWS_PROFILE=<profile-name>

# ==============================================================================
# 2. Lambda Configuration
# ==============================================================================

# RS_LAMBDA_PREFIX: Prefix for Lambda function names (default: carto-at-)
RS_LAMBDA_PREFIX=carto-at-

# Resource Naming:
#   - Lambda functions: {RS_LAMBDA_PREFIX}{function_name} (kebab-case)
#     Example with RS_LAMBDA_PREFIX=carto-at-: carto-at-quadbin_polyfill
#   - IAM execution role: {PascalCase(RS_LAMBDA_PREFIX)}LambdaExecutionRole
#     Example with RS_LAMBDA_PREFIX=carto-at-: CartoATLambdaExecutionRole
#     Example with RS_LAMBDA_PREFIX=dev-carto-at-: DevCartoATLambdaExecutionRole
#   - Session name: {RS_LAMBDA_PREFIX}deployer (with underscores)
#     Example: carto_at_deployer
#
#   Note: 'at' is preserved as 'AT' (acronym for Analytics Toolbox)

# Lambda Execution Role (optional - recommended for production)
# If not specified, will auto-create based on RS_LAMBDA_PREFIX
# Default (RS_LAMBDA_PREFIX=carto-at-): CartoATLambdaExecutionRole
# To avoid needing IAM permissions, pre-create this role with:
#   - Trust policy allowing lambda.amazonaws.com to assume it
#   - Attached policy: AWSLambdaBasicExecutionRole
# Example:
#   RS_LAMBDA_EXECUTION_ROLE=arn:aws:iam::<account-id>:role/CartoATLambdaExecutionRole

# ==============================================================================
# 3. Redshift Connection
# ==============================================================================
# Connection credentials for your Redshift cluster

# Direct connection to Redshift
# Requires: pip install redshift_connector (included in requirements.txt)
RS_HOST=<cluster>.<account>.<region>.redshift.amazonaws.com
RS_USER=<user>
RS_PASSWORD=<password>

# ==============================================================================
# 4. Redshift Deployment Configuration
# ==============================================================================

# RS_DATABASE: Target database for Analytics Toolbox functions
RS_DATABASE=<database>

# RS_PREFIX: Prefix for development schemas/libraries
#   - production=0 (dev): schema = "{RS_PREFIX}carto" (e.g., "myname_carto")
#   - production=1 (prod): schema = "carto" (no prefix)
RS_PREFIX=

# IAM Role for Redshift to Invoke Lambda Functions
# ================================================
# This role is attached to your Redshift cluster and used in external function definitions:
#   CREATE EXTERNAL FUNCTION ... IAM_ROLE 'arn:aws:iam::...'
#
# IMPORTANT: This is DIFFERENT from clouds RS_ROLES
#   - RS_LAMBDA_INVOKE_ROLE (gateway): For YOUR self-deployed Lambda functions
#   - RS_ROLES (clouds): For CARTO's production Lambda functions
#
# OPTION 1: Auto-create role (recommended for new setups)
# --------------------------------------------------------
# Leave RS_LAMBDA_INVOKE_ROLE commented out or omit it entirely.
# The gateway will automatically:
#   1. Create role: {RS_LAMBDA_PREFIX}RedshiftInvokeRole
#      Example with RS_LAMBDA_PREFIX=carto-at-: CartoATRedshiftInvokeRole
#   2. Attach Lambda invoke permissions
#   3. Attach role to your Redshift cluster (auto-detected from RS_HOST)
#   4. Configure Lambda resource policies to allow invocation
#
# This works for same-account setups (Lambda and Redshift in same AWS account).
#
# OPTION 2: Use existing role (recommended for production or cross-account)
# --------------------------------------------------------------------------
# RS_LAMBDA_INVOKE_ROLE=arn:aws:iam::123456789:role/MyRedshiftLambdaRole
#
# When you provide RS_LAMBDA_INVOKE_ROLE, the gateway assumes you have:
#   - Already attached this role to your Redshift cluster
#   - Configured proper trust policies for cross-account (if applicable)
#
# The gateway will still auto-configure Lambda resource policies for this role.
#
# Cross-Account Setup (Lambda in Account A, Redshift in Account B):
# ------------------------------------------------------------------
# 1. Deploy Lambda in Account A (using AWS credentials from Account A)
# 2. Set RS_LAMBDA_INVOKE_ROLE to a role in Account A (Lambda's account):
#    RS_LAMBDA_INVOKE_ROLE=arn:aws:iam::ACCOUNT-A:role/MyRedshiftLambdaRole
# 3. Ensure the role trusts Redshift service in Account B:
#    Trust policy: Principal: {"Service": "redshift.amazonaws.com"}
# 4. Manually attach the role to Redshift cluster in Account B
# 5. Lambda resource policies will be auto-configured during deployment
#
# Note: Gateway typically uses one role. Multiple comma-separated roles are
# supported for advanced role chaining scenarios (like CARTO clouds).
