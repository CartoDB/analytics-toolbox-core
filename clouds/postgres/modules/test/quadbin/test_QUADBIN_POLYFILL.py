# flake8: noqa
import pytest
from test_utils import run_query

point = 'POINT(-3.7115216913662175 40.41092231814629)'
multi_point = 'MULTIPOINT ((-3.7115216913662175 40.41092231814629),(-3.7112427416286686 40.41200062990766),(-3.710985249563239 40.41080795073389))'
line = 'LINESTRING(-3.7142468157253483 40.40915777072141,-3.712337082906745 40.41110203797309,-3.711178368612311 40.40969694289874,-3.709290093465827 40.411396123927084)'
multi_line = 'MULTILINESTRING ((-3.7142468157253483 40.40915777072141,-3.712337082906745 40.41110203797309,-3.711178368612311 40.40969694289874,-3.709290093465827 40.411396123927084),(-3.7137572531829233 40.40860338576905,-3.7100021605620737 40.40893832932828))'
polygon = 'POLYGON ((-3.71219873428345 40.413365349070865,-3.7144088745117 40.40965661286395,-3.70659828186035 40.409525904775634,-3.71219873428345 40.413365349070865))'
multi_polygon = 'MULTIPOLYGON (((-3.7102890014648438 40.412768896581476,-3.7081432342529297 40.41124946964811,-3.707242012023926 40.41370014129302,-3.7102890014648438 40.412768896581476)),((-3.71219873428345 40.413365349070865,-3.7144088745117 40.40965661286395,-3.70659828186035 40.409525904775634,-3.71219873428345 40.413365349070865),(-3.7122470136178776 40.41158984452673,-3.710165619422321 40.41109970196702,-3.711882233191852 40.41018475963737,-3.7122470136178776 40.41158984452673)))'


@pytest.mark.parametrize(
    'name,resolution,geom,output',
    [
        ('Point', 17, point, None),
        ('Line', 15, line, None),
        (
            'Polygon',
            17,
            polygon,
            [5265786693163941887, 5265786693164466175, 5265786693164728319],
        ),
        (
            'MultiPolygon',
            17,
            multi_polygon,
            [
                5265786693163941887,
                5265786693164466175,
                5265786693164204031,
                5265786693164728319,
            ],
        ),
    ],
)
def test_quadbin_polyfill(name, resolution, geom, output):
    result = run_query(
        f"""
        SELECT @@PG_SCHEMA@@.QUADBIN_POLYFILL(
            ST_GEOMFROMTEXT('{geom}'), {resolution})"""
    )
    if output:
        assert sorted(result[0][0]) == sorted(output)
    else:
        result[0][0] == output


@pytest.mark.parametrize(
    'name,mode,resolution,geom,output',
    [
        ('Point', 'center', 17, point, None),
        ('Point', 'contains', 17, point, None),
        ('Point', 'intersects', 17, point, [5265786693164466175]),
        ('MultiPoint', 'intersects', 16, multi_point, [5261283093537357823]),
        (
            'MultiPoint',
            'intersects',
            17,
            multi_point,
            [5265786693163941887, 5265786693164466175],
        ),
        (
            'MultiPoint',
            'intersects',
            19,
            multi_point,
            [5274793892419026943, 5274793892418650111, 5274793892419076095],
        ),
        ('Line', 'center', 15, line, None),
        ('Line', 'contains', 15, line, None),
        ('Line', 'intersects', 15, line, [5256779493900550143, 5256779493913133055]),
        (
            'Line',
            'intersects',
            17,
            line,
            [
                5265786693153193983,
                5265786693154766847,
                5265786693164466175,
                5265786693164728319,
            ],
        ),
        (
            'Line',
            'intersects',
            18,
            line,
            [
                5270290292780564479,
                5270290292782006271,
                5270290292791640063,
                5270290292791771135,
                5270290292791705599,
                5270290292791836671,
                5270290292791902207,
                5270290292792033279,
            ],
        ),
        (
            'MultiLine',
            'intersects',
            15,
            multi_line,
            [5256779493900550143, 5256779493913133055],
        ),
        (
            'MultiLine',
            'intersects',
            17,
            multi_line,
            [
                5265786693153193983,
                5265786693154766847,
                5265786693164466175,
                5265786693166039039,
                5265786693164728319,
                5265786693166301183,
            ],
        ),
        ('Polygon', 'wrong-mode', 17, polygon, None),
        (
            'Polygon',
            'center',
            17,
            polygon,
            [5265786693163941887, 5265786693164466175, 5265786693164728319],
        ),
        ('Polygon', 'contains', 18, polygon, [5270290292791705599]),
        (
            'Polygon',
            'intersects',
            17,
            polygon,
            [
                5265786693153193983,
                5265786693163941887,
                5265786693164466175,
                5265786693164204031,
                5265786693164728319,
                5265786693165514751,
            ],
        ),
        (
            'MultiPolygon',
            'center',
            17,
            multi_polygon,
            [
                5265786693163941887,
                5265786693164466175,
                5265786693164204031,
                5265786693164728319,
            ],
        ),
        ('MultiPolygon', 'contains', 18, multi_polygon, None),
        (
            'MultiPolygon',
            'intersects',
            17,
            multi_polygon,
            [
                5265786693153193983,
                5265786693163941887,
                5265786693164466175,
                5265786693074550783,
                5265786693164204031,
                5265786693164728319,
                5265786693075337215,
                5265786693164990463,
                5265786693165514751,
            ],
        ),
    ],
)
def test_quadbin_polyfill_mode(name, mode, resolution, geom, output):
    result = run_query(
        f"""
        SELECT @@PG_SCHEMA@@.QUADBIN_POLYFILL(
            ST_GEOMFROMTEXT('{geom}'), {resolution}, '{mode}')"""
    )
    if output:
        assert sorted(result[0][0]) == sorted(output)
    else:
        result[0][0] == output
