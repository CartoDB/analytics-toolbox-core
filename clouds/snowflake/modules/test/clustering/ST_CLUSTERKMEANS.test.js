const { runQuery } = require('../../../common/test-utils');

const points1FixturesOut = require('./fixtures/st_clusterkmeans_out_points1');
const points2FixturesOut = require('./fixtures/st_clusterkmeans_out_points2');
const points3FixturesOut = require('./fixtures/st_clusterkmeans_out_points3');

test('ST_CLUSTERKMEANS should work', async () => {
    const query = `SELECT
        @@SF_SCHEMA@@.ST_CLUSTERKMEANS(ARRAY_CONSTRUCT(ST_ASGEOJSON(ST_POINT(0, 0))::STRING, ST_ASGEOJSON(ST_POINT(0, 1))::STRING, ST_ASGEOJSON(ST_POINT(5, 0))::STRING, ST_ASGEOJSON(ST_POINT(1, 0))::STRING), 2) as clusterKMeans1,
        @@SF_SCHEMA@@.ST_CLUSTERKMEANS(ARRAY_CONSTRUCT(ST_ASGEOJSON(ST_POINT(0, 0))::STRING, ST_ASGEOJSON(ST_POINT(0, 1))::STRING, ST_ASGEOJSON(ST_POINT(5, 0))::STRING, ST_ASGEOJSON(ST_POINT(1, 0))::STRING, ST_ASGEOJSON(ST_POINT(0, 1))::STRING, ST_ASGEOJSON(ST_POINT(5, 0))::STRING, ST_ASGEOJSON(ST_POINT(1, 19))::STRING, ST_ASGEOJSON(ST_POINT(12, 1))::STRING, ST_ASGEOJSON(ST_POINT(9, 2))::STRING, ST_ASGEOJSON(ST_POINT(1, 10))::STRING, ST_ASGEOJSON(ST_POINT(-3, 1))::STRING, ST_ASGEOJSON(ST_POINT(5, 5))::STRING, ST_ASGEOJSON(ST_POINT(8, 6))::STRING, ST_ASGEOJSON(ST_POINT(10, 10))::STRING, ST_ASGEOJSON(ST_POINT(-3, -5))::STRING, ST_ASGEOJSON(ST_POINT(6, 5))::STRING, ST_ASGEOJSON(ST_POINT(-8, 9))::STRING, ST_ASGEOJSON(ST_POINT(1, -10))::STRING, ST_ASGEOJSON(ST_POINT(2, -2))::STRING, ST_ASGEOJSON(ST_POINT(0, 0))::STRING, ST_ASGEOJSON(ST_POINT(3, 10))::STRING), 3) as clusterKMeans2,
        @@SF_SCHEMA@@.ST_CLUSTERKMEANS(ARRAY_CONSTRUCT(ST_ASGEOJSON(ST_POINT(0, 0))::STRING, ST_ASGEOJSON(ST_POINT(0, 1))::STRING, ST_ASGEOJSON(ST_POINT(5, 0))::STRING, ST_ASGEOJSON(ST_POINT(1, 0))::STRING, ST_ASGEOJSON(ST_POINT(0, 1))::STRING, ST_ASGEOJSON(ST_POINT(5, 0))::STRING, ST_ASGEOJSON(ST_POINT(1, 19))::STRING, ST_ASGEOJSON(ST_POINT(12, 1))::STRING, ST_ASGEOJSON(ST_POINT(9, 2))::STRING, ST_ASGEOJSON(ST_POINT(1, 10))::STRING, ST_ASGEOJSON(ST_POINT(-3, 1))::STRING, ST_ASGEOJSON(ST_POINT(5, 5))::STRING, ST_ASGEOJSON(ST_POINT(8, 6))::STRING, ST_ASGEOJSON(ST_POINT(10, 10))::STRING, ST_ASGEOJSON(ST_POINT(-3, -5))::STRING, ST_ASGEOJSON(ST_POINT(6, 5))::STRING, ST_ASGEOJSON(ST_POINT(-8, 9))::STRING, ST_ASGEOJSON(ST_POINT(1, -10))::STRING, ST_ASGEOJSON(ST_POINT(2, -2))::STRING, ST_ASGEOJSON(ST_POINT(0, 0))::STRING, ST_ASGEOJSON(ST_POINT(3, 10))::STRING), 5) as clusterKMeans3
    `;
    const rows = await runQuery(query);
    expect(rows.length).toEqual(1);
    expect(JSON.stringify(rows[0].CLUSTERKMEANS1)).toEqual(points1FixturesOut.value);
    expect(JSON.stringify(rows[0].CLUSTERKMEANS2)).toEqual(points2FixturesOut.value);
    expect(JSON.stringify(rows[0].CLUSTERKMEANS3)).toEqual(points3FixturesOut.value);
});

test('ST_CLUSTERKMEANS should return NULL if any NULL mandatory argument', async () => {
    const query = `SELECT
        @@SF_SCHEMA@@.ST_CLUSTERKMEANS(NULL, 2) as clusterKMeans1,
        @@SF_SCHEMA@@.ST_CLUSTERKMEANS(ARRAY_CONSTRUCT(ST_ASGEOJSON(ST_POINT(0, 0))::STRING, ST_ASGEOJSON(ST_POINT(0, 1))::STRING, ST_ASGEOJSON(ST_POINT(5, 0))::STRING, ST_ASGEOJSON(ST_POINT(1, 0))::STRING), NULL) as clusterKMeans2
    `;
    const rows = await runQuery(query);
    expect(rows.length).toEqual(1);
    expect(rows[0].CLUSTERKMEANS1).toEqual([]);
    expect(rows[0].CLUSTERKMEANS2).toEqual([]);
});

test('ST_CLUSTERKMEANS default values should work', async () => {
    const query = `SELECT
        @@SF_SCHEMA@@.ST_CLUSTERKMEANS(ARRAY_CONSTRUCT(ST_ASGEOJSON(ST_POINT(9,10))::STRING, ST_ASGEOJSON(ST_POINT(11,12))::STRING, ST_ASGEOJSON(ST_POINT(10,10))::STRING, ST_ASGEOJSON(ST_POINT(13,10))::STRING, ST_ASGEOJSON(ST_POINT(15,8))::STRING, ST_ASGEOJSON(ST_POINT(13,6))::STRING, ST_ASGEOJSON(ST_POINT(9,10))::STRING, ST_ASGEOJSON(ST_POINT(11,12))::STRING, ST_ASGEOJSON(ST_POINT(10,10))::STRING, ST_ASGEOJSON(ST_POINT(13,10))::STRING, ST_ASGEOJSON(ST_POINT(15,8))::STRING, ST_ASGEOJSON(ST_POINT(13,6))::STRING, ST_ASGEOJSON(ST_POINT(9,10))::STRING, ST_ASGEOJSON(ST_POINT(11,12))::STRING, ST_ASGEOJSON(ST_POINT(10,10))::STRING, ST_ASGEOJSON(ST_POINT(13,10))::STRING, ST_ASGEOJSON(ST_POINT(15,8))::STRING, ST_ASGEOJSON(ST_POINT(13,6))::STRING), 3) as defaultValue,
        @@SF_SCHEMA@@.ST_CLUSTERKMEANS(ARRAY_CONSTRUCT(ST_ASGEOJSON(ST_POINT(9,10))::STRING, ST_ASGEOJSON(ST_POINT(11,12))::STRING, ST_ASGEOJSON(ST_POINT(10,10))::STRING, ST_ASGEOJSON(ST_POINT(13,10))::STRING, ST_ASGEOJSON(ST_POINT(15,8))::STRING, ST_ASGEOJSON(ST_POINT(13,6))::STRING, ST_ASGEOJSON(ST_POINT(9,10))::STRING, ST_ASGEOJSON(ST_POINT(11,12))::STRING, ST_ASGEOJSON(ST_POINT(10,10))::STRING, ST_ASGEOJSON(ST_POINT(13,10))::STRING, ST_ASGEOJSON(ST_POINT(15,8))::STRING, ST_ASGEOJSON(ST_POINT(13,6))::STRING, ST_ASGEOJSON(ST_POINT(9,10))::STRING, ST_ASGEOJSON(ST_POINT(11,12))::STRING, ST_ASGEOJSON(ST_POINT(10,10))::STRING, ST_ASGEOJSON(ST_POINT(13,10))::STRING, ST_ASGEOJSON(ST_POINT(15,8))::STRING, ST_ASGEOJSON(ST_POINT(13,6))::STRING)) as nullParam
    `;
    const rows = await runQuery(query);
    expect(rows.length).toEqual(1);
    expect(rows[0].NULLPARAM).toEqual(rows[0].DEFAULTVALUE);
});